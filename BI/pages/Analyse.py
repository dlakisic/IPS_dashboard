import sys
import os

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(parent_dir)

import streamlit as st
import plotly_express as px
from data.data import merge_df


st.set_page_config(page_title = "Analyse",
                   page_icon = "üîé",
                   layout = "wide"
)
st.title("Analyse")

# ---- SIDEBAR ----
st.sidebar.header("Filtres")

# S√©lection des acad√©mies
academie = st.sidebar.multiselect(
    "Acad√©mie :",
    options=merge_df["academie"].unique(),
)

# Filtrer les d√©partements en fonction des acad√©mies s√©lectionn√©es
departements_disponibles = merge_df.loc[merge_df["academie"].isin(academie), "departement"].unique()

# S√©lection des d√©partements
departement = st.sidebar.multiselect(
    "D√©partement :",
    options=departements_disponibles,
)

# Filtrer les communes en fonction des acad√©mies et d√©partements s√©lectionn√©s
communes_disponibles = merge_df.loc[(merge_df["academie"].isin(academie)) & (merge_df["departement"].isin(departement)), "nom_de_la_commune"].unique()

# S√©lection des communes
commune = st.sidebar.multiselect(
    "Commune :",
    options=communes_disponibles,
)

# S√©lection des ann√©es scolaires
annee_scolaire = st.sidebar.multiselect(
    "Ann√©e scolaire :",
    options=merge_df["rentree_scolaire"].unique(),
)

# S√©lection du niveau
niveau = st.sidebar.multiselect(
    "Niveau :",
    options=merge_df["niveau"].unique(),
)

# ---- MAIN ----

st.subheader("Tableau complet")
st.dataframe(merge_df)

# Appliquer les filtres
st.subheader("S√©lectionnez des filtres pour afficher votre s√©lection.")
filtered_df = merge_df.loc[(merge_df["academie"].isin(academie)) & (merge_df["departement"].isin(departement)) & (merge_df["nom_de_la_commune"].isin(commune)) & (merge_df["rentree_scolaire"].isin(annee_scolaire)) & (merge_df["niveau"].isin(niveau))].set_index('numero_uai')

# Afficher le dataframe filtr√©
st.dataframe(filtered_df)

col1, col2 = st.columns(2)

with col1:
    st.plotly_chart(px.pie(merge_df, names='secteur', title='R√©partition des √©coles par secteur', template="plotly_dark"))
    st.markdown("""Ce graphique montre la r√©partition des √©coles par secteur. Chaque secteur est repr√©sent√© par une part de secteur color√©e. Lorsque vous survolez une part de secteur, vous verrez les informations suppl√©mentaires telles que le secteur, les effectifs et l'IPS de l'√©tablissement associ√©.""")

with col2:
    st.plotly_chart(px.scatter(merge_df.sample(n=1000, random_state=42), x='ips', y='effectifs', title= "√âchantillon de 1000 points comparant l'ips √† l'effectif", hover_data={'nom_de_l_etablissment': True, 'secteur': True, 'effectifs': True, 'ips': True}))
    st.markdown("""Ce graphique montre un √©chantillon de 1000 points qui compare l'IPS (indicateur de performance scolaire) √† l'effectif des √©tablissements scolaires. Chaque point repr√©sente un √©tablissement, et sa position sur l'axe des x est d√©termin√©e par l'IPS, tandis que sa position sur l'axe des y est d√©termin√©e par l'effectif. Lorsque vous survolez un point, vous verrez des informations d√©taill√©es telles que le nom de l'√©tablissement, le secteur, les effectifs et l'IPS associ√©s.""")

st.plotly_chart(px.bar(merge_df.groupby('academie').size().reset_index(name='count'), x= 'academie', y='count', title='Nombre d\'√©tablissements scolaires par acad√©mie'))
st.markdown("""Ce graphique montre le nombre d'√©tablissements scolaires par acad√©mie. Chaque barre repr√©sente une acad√©mie et sa hauteur est proportionnelle au nombre d'√©tablissements dans cette acad√©mie.""")